#! /usr/bin/env python3

from argparse import ArgumentParser
import tempfile
import logging
import os
import shutil
import re
import subprocess


class tlist(list):
    def __iadd__(self, item):
        if isinstance(item, list):
            for i in item:
                self.append(i)
        else:
            self.append(item)
        return self


parser = ArgumentParser(
    description="A utility for creating image files from latex snippets..")

parser.add_argument("latex_snippet_or_file",
                    action="store",
                    nargs="*",
                    default=[],
                    help="LaTeX snippet or filename conotainting latex code to compile.")

parser.add_argument("-v", "--verbose",
                    action="store_true",
                    help="Log information.")

parser.add_argument("-d", "--debug",
                    action="store_true",
                    help="Log debug information.")

parser.add_argument("-k", "--keep-files",
                    action="store_true",
                    help="Keep generated files.")

parser.add_argument("-n", "--no-equation-environment",
                    action="store_true",
                    help="Do not wrap snippet in equation environment. Useful if you want to use your own environment.")

parser.add_argument("-s", "--font-size",
                    action="store",
                    default=12,
                    help="Document font size.")

parser.add_argument("-b", "--background-color",
                    action="store",
                    default="white",
                    help="Background color.")

parser.add_argument("-t", "--text-color",
                    action="store",
                    default="black",
                    help="Text color.")

parser.add_argument("-x", "--preamble",
                    action="store",
                    default="",
                    help="Read additional preamble lines from file.")

parser.add_argument("-B", "--border",
                    action="store",
                    default=0,
                    help="Size of border, in pixels.")

parser.add_argument("-r", "--resolution",
                    action="store",
                    default="150x150",
                    help="Size of border, in pixels.")

parser.add_argument("-z", "--transparent-background",
                    action="store_true",
                    help="Make background transparent.")

parser.add_argument("-f", "--output-format",
                    action="store",
                    default="png",
                    help="Output image file format. This can be any file extension that ImageMagick's convert command knows about.")

parser.add_argument("-o", "--output-name",
                    action="store",
                    default="out",
                    help="Basename to use for output filename. Image format extension will be appended.")

args = parser.parse_args()

if args.debug:
    logging.basicConfig(level=logging.DEBUG)
elif args.verbose:
    logging.basicConfig(level=logging.INFO)
else:
    logging.basicConfig(level=logging.ERROR)

def tex2im(args,i=0):
  # create a tmp dir to work in
  curdir = os.getcwd()
  tmpdir = tempfile.mkdtemp(prefix="tex2im-")
  logging.info("created {}".format(tmpdir))


  # if snippet is a filename, copy it to the tmpdir and read it in
  # if snippet is not a file, write it to the tmp dir
  # we need a file name 'in.tex' in the tmpdir to embed in the image comment
  # with convert. TODO: write a shebang to in.tex
  latex_snippet = args.latex_snippet_or_file[i]
  if os.path.isfile(latex_snippet):
      shutil.copyfile(latex_snippet, os.path.join(tmpdir,"in.tex"))
      logging.info("{} is a file, reading now".format(latex_snippet))
      with open(latex_snippet) as f:
          # read lines, but remove comments
          lines = filter(lambda x: not re.match('\s*#', x), f.readlines())
          latex_snippet = ''.join(lines).strip()
  else:
    with open(os.path.join(tmpdir,"in.tex"),'w') as f:
      f.write(latex_snippet)

  logging.info("LaTeX snippet: {}".format(latex_snippet))


  logging.info("creating temp directory")


  os.chdir(tmpdir)


  latex_lines = tlist()

  # preamble
  latex_lines += r'\documentclass[%dpt]{article}' % args.font_size
  latex_lines += r'\usepackage{color}'
  # latex_lines += r'\usepackage[dvips]{graphicx}'
  latex_lines += r'\pagestyle{empty}'
  latex_lines += r'\pagecolor{%s}' % args.background_color

  # look for a preamble file to load
  for preamble in [args.preamble, os.path.join(curdir, '.tex2im_preamble'), os.path.join(os.getenv("HOME"), '.tex2im_preamble'), os.path.join(os.getenv("HOME"), '.tex2im_header')
                   ]:
      if os.path.isfile(preamble):
          with open(preamble, 'r') as f:
              latex_lines += f.readlines()
          break


  # document
  latex_lines += r'\begin{document}{'
  latex_lines += r'\color{%s}' % args.text_color
  if not args.no_equation_environment:
      latex_lines += r'\begin{eqnarray*}'

  # snippet
  latex_lines += latex_snippet

  # end document
  if not args.no_equation_environment:
      latex_lines += r'\end{eqnarray*}'
  latex_lines += r'}\end{document}'


  logging.info("writing LaTeX document to {}/out.tex".format(tmpdir))
  with open('out.tex', 'w') as f:
      f.write('\n'.join(latex_lines))

  # TODO: detect image files in the latex snippet make them available in the tempdir

  latex_cmd = "pdflatex -interaction=nonstopmode out.tex"
  logging.info("running LaTeX: {}".format(latex_cmd))
  res = subprocess.run( latex_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT )
  if res.returncode:
    logging.error("LaTeX command returned non-zero status")
    logging.error("LaTeX command: {}".format(latex_cmd))
    logging.error("LaTeX input (out.tex):")
    logging.error("\n".join(latex_lines))
    logging.error("LaTeX output:")
    logging.error(res.stdout.decode('utf-8'))



  # convert to ouput image format
  convert_cmd = "convert -trim -border {BORDER} -bordercolor {BORDERCOLOR} +adjoin -density {DENSITY}".format(BORDER=args.border
                                                                                                             ,BORDERCOLOR=args.background_color
                                                                                                             ,DENSITY=args.resolution
                                                                                                             )
  if args.transparent_background:
    convert_cmd += " +antialias -transparent {}".format(args.background_color)
  else:
    convert_cmd += " -antialias"

  # add tex code to comment
  # need to write the snippet to a file
  convert_cmd += " -comment @{}/in.tex"

  # TODO: generate output file name from input filename (if input is actually a file)
  output_file = "{}.{}".format(args.output_name,args.output_format)
  convert_cmd += " out.pdf"
  convert_cmd += " {}".format(output_file)

  logging.info("running ImageMagick: {}".format(convert_cmd))
  res = subprocess.run( convert_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT )
  if res.returncode:
    logging.error("convert command returned non-zero status")
    logging.error("convert command: {}".format(convert_cmd))
    logging.error("convert output:")
    logging.error(res.stdout.decode('utf-8'))


  # copy image to working directory
  logging.info("copying file back to {}".format(os.path.join(curdir,output_file)))
  shutil.copyfile(output_file, os.path.join(curdir,output_file))


  os.chdir(curdir)
  if args.keep_files:
      print("Generated files were written to {}.".format(tmpdir))
  else:
      shutil.rmtree(tmpdir)
      logging.info("deleted {}".format(tmpdir))


if __name__ == "__main__":
  # TODO: call use multiprocessing to convert multiple images in parallel
  # will need to rewrite the output file naming code.
  for i in range(len(args.latex_snippet_or_file)):
    tex2im(args,i)

